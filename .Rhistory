} else if(string == "Exam") {
return(3)
} else {
return(4)
}
}
# Put data into tidy format-- Individual grades with properties - Assignment Name, Student, Assignment type, Assignment id, Grade, Max Grade
tidy_grades <- student_grades %>%
gather(key="Assignment", value="points", 5:58) %>%
separate("Assignment", c("assign.type", "grade.id"), remove=FALSE, sep="_", convert=TRUE) %>%
mutate(max_points = sapply(assign.type, get_max_points),
grade.type = sapply(assign.type, get_grade_type),
student.id = as.character(factor(student.names)))
# Drop extra columns
tidy_grades$avg_exam.score <- NULL
tidy_grades$avg_hw.score <- NULL
tidy_grades$avg_act.score <- NULL
head(tidy_grades)
get_max_points <- function(string) {
if(string == "Activity"){
return(3)
} else if(string == "Homework"){
return(25)
} else {
return(100)
}
}
get_grade_type <- function(string){
if(string == "Activity"){
return(1)
} else if(string == "Homework"){
return(2)
} else if(string == "Exam") {
return(3)
} else {
return(4)
}
}
# Put data into tidy format-- Individual grades with properties - Assignment Name, Student, Assignment type, Assignment id, Grade, Max Grade
tidy_grades <- student_grades %>%
gather(key="Assignment", value="points", 5:58) %>%
separate("Assignment", c("assign.type", "grade.id"), remove=FALSE, sep="_", convert=TRUE) %>%
mutate(max_points = sapply(assign.type, get_max_points),
grade.type = sapply(assign.type, get_grade_type),
student.id = as.numeric(as.character(factor(student.names))))
# Drop extra columns
tidy_grades$avg_exam.score <- NULL
tidy_grades$avg_hw.score <- NULL
tidy_grades$avg_act.score <- NULL
head(tidy_grades)
get_max_points <- function(string) {
if(string == "Activity"){
return(3)
} else if(string == "Homework"){
return(25)
} else {
return(100)
}
}
get_grade_type <- function(string){
if(string == "Activity"){
return(1)
} else if(string == "Homework"){
return(2)
} else if(string == "Exam") {
return(3)
} else {
return(4)
}
}
# Put data into tidy format-- Individual grades with properties - Assignment Name, Student, Assignment type, Assignment id, Grade, Max Grade
tidy_grades <- student_grades %>%
gather(key="Assignment", value="points", 5:58) %>%
separate("Assignment", c("assign.type", "grade.id"), remove=FALSE, sep="_", convert=TRUE) %>%
mutate(max_points = sapply(assign.type, get_max_points),
grade.type = sapply(assign.type, get_grade_type),
student.id = as.numeric(factor(student.names)))
# Drop extra columns
tidy_grades$avg_exam.score <- NULL
tidy_grades$avg_hw.score <- NULL
tidy_grades$avg_act.score <- NULL
head(tidy_grades)
get_max_points <- function(string) {
if(string == "Activity"){
return(3)
} else if(string == "Homework"){
return(25)
} else {
return(100)
}
}
get_grade_type <- function(string){
if(string == "Activity"){
return(1)
} else if(string == "Homework"){
return(2)
} else if(string == "Exam") {
return(3)
} else {
return(4)
}
}
# Put data into tidy format-- Individual grades with properties - Assignment Name, Student, Assignment type, Assignment id, Grade, Max Grade
tidy_grades <- student_grades %>%
gather(key="Assignment", value="points", 5:58) %>%
separate("Assignment", c("assign.type", "grade.id"), remove=FALSE, sep="_", convert=TRUE) %>%
mutate(max_points = sapply(assign.type, get_max_points),
grade.type = sapply(assign.type, get_grade_type),
student.id = as.integer(factor(student.names)))
# Drop extra columns
tidy_grades$avg_exam.score <- NULL
tidy_grades$avg_hw.score <- NULL
tidy_grades$avg_act.score <- NULL
head(tidy_grades)
exam_grades <- censored_grades %>%
filter(assign.type == "Exam")
homework_grades <- censored_grades %>%
filter(assign.type == "Homework")
activity_grades <- censored_grades %>%
filter(assign.type == "Activity")
data = list(Nact = 37,
Nhw = 12,
Nexam = 4,
Nstudents = max(tidy_grades$student.id),
Ngrades = length(tidy_grades$points),
grades = tidy_grades$points ,
students = tidy_grades$student.id,
grade_type = tidy_grades$grade.type,
grade_id = tidy_grades$grade.id)
exam_grades <- censored_grades %>%
filter(assign.type == "Exam")
homework_grades <- censored_grades %>%
filter(assign.type == "Homework")
activity_grades <- censored_grades %>%
filter(assign.type == "Activity")
data = list(Nact = 37,
Nhw = 12,
Nexam = 4,
Nstudents = max(tidy_grades$student.id),
Ngrades = length(tidy_grades$points),
grades = tidy_grades$points ,
students = tidy_grades$student.id,
grade_type = tidy_grades$grade.type,
grade_id = tidy_grades$grade.id)
fit = stan(file = "grade_pred.stan", data = data, chains = 1, iter = 100)
exam_grades <- censored_grades %>%
filter(assign.type == "Exam")
homework_grades <- censored_grades %>%
filter(assign.type == "Homework")
activity_grades <- censored_grades %>%
filter(assign.type == "Activity")
data = list(Nact = 37,
Nhw = 12,
Nexam = 4,
Nstudents = max(tidy_grades$student.id),
Ngrades = length(tidy_grades$points),
grades = tidy_grades$points ,
students = tidy_grades$student.id,
grade_type = tidy_grades$grade.type,
grade_id = tidy_grades$grade.id)
fit = stan(file = "grade_pred.stan", data = data, chains = 4, iter = 1000)
print(fit)
print(fit)
pairs(fit, pars = c("theta_ex", "theta_hw", "theta_act"))
help("stanfit-class")
M = 2.5
Rdisk = 0.06
Idisk = 0.5*M*Rdisk^2
m = 0.1
Rmass = 0.08
Imass = m*Rmass^2
I = Idisk + 4*Imass
print(i)
M = 2.5
Rdisk = 0.06
Idisk = 0.5*M*Rdisk^2
m = 0.1
Rmass = 0.08
Imass = m*Rmass^2
I = Idisk + 4*Imass
print(I)
M = 2.5
Rdisk = 0.06
Idisk = 0.5*M*Rdisk^2
m = 0.1
Rmass = 0.08
Imass = m*Rmass^2
I = Idisk + 4*Imass
print(20./3)
M = 2.5
Rdisk = 0.06
Idisk = 0.5*M*Rdisk^2
m = 0.1
Rmass = 0.08
Imass = m*Rmass^2
I = Idisk + 4*Imass
print(4+8+8)
# Clear the environment
rm(list = ls())
gc(reset = TRUE)
# Notebook Settings
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = TRUE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
#fig.width = 7,
#fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
# Clear the environment
rm(list = ls())
gc(reset = TRUE)
# Notebook Settings
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = TRUE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
#fig.width = 7,
#fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
install.packages("doParallel")
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
library(bayesplot)
library(cowplot)
install.packages(cowplot)
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
library(bayesplot)
library(cowplot)
install.packages("cowplot")
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
library(bayesplot)
library(stringr)
library(readxl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_cowplot())
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
library(bayesplot)
library(stringr)
library(readxl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
#theme_set(theme_cowplot())
df <- read.csv("unpacked_plant_data.csv", header = TRUE)
df <- read_excel("Plant-Data-Clean.xlsx", sheet = "Tidydata")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= Failure.Date)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Genotype)
df <- read.csv("unpacked_plant_data.csv", header = TRUE)
#df <- read_excel("Plant-Data-Clean.xlsx", sheet = "Tidydata")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
#ggplot(data = df %>% filter(Censored==0), aes(x= Failure.Date)) +
#  geom_histogram(color = "Black", fill = "DodgerBlue4") +
#  facet_wrap(~Genotype)
df <- read.csv("unpacked_plant_data.csv", header = TRUE)
#df <- read_excel("Plant-Data-Clean.xlsx", sheet = "Tidydata")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= First.Infection)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Ecotype)
# set up the data
uncensored_df <- df %>% filter(Censored==0, Ecotype == "XI-2")
y = uncensored_df$First.Infection
N = length(y)
data = list(y=y,
N=N)
fit <- stan(file = "fit_weibull_model01.stan",
data = data,
iter = 1000,
chains = 4)
# set up the data
uncensored_df <- df %>% filter(Censored==0, Ecotype == "XI-2")
y = uncensored_df$First.Infection
N = length(y)
data = list(y=y,
N=N)
#fit <- stan(file = "fit_weibull_model01.stan",
#            data = data,
#            iter = 1000,
#            chains = 4)
pairs(fit)
# set up the data
uncensored_df <- df %>% filter(Censored==0, Ecotype == "XI-2")
y = uncensored_df$First.Infection
N = length(y)
data = list(y=y,
N=N)
#fit <- stan(file = "fit_weibull_model01.stan",
#            data = data,
#            iter = 1000,
#            chains = 4)
#pairs(fit)
# set up the data
uncensored_df <- df %>% filter(Censored==0, Ecotype == "XI-2")
y = uncensored_df$First.Infection
N = length(y)
data = list(y=y,
N=N)
fit <- stan(file = "fit_weibull_model01.stan",
data = data,
iter = 1000,
chains = 4)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug=TRUE)
# Clear the environment
rm(list = ls())
gc(reset = TRUE)
# Notebook Settings
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = TRUE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
#fig.width = 7,
#fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
library(tidyverse)
library(rstan)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("StanHeaders")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
remove.packages("StanHeaders")
remove.packages("rstan")
R.Version
R.Version()
install.package(tidyverse)
install.package("tidyverse")
install.packages("tidyverse")
install.packages("tufte")
library('foreach')
install.packages("foreach")
install.packages("doParallel")
installed.packages("bayesplot")
install.packages("bayesplot")
install.packages("cowplot")
install.packages("stringr")
install.packages("readxl")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=native -mtune=native" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
# Clear the environment
rm(list = ls())
gc(reset = TRUE)
# Notebook Settings
knitr::opts_chunk$set(
include = TRUE,
cache = TRUE,
collapse = TRUE,
echo = TRUE,
message = FALSE,
tidy = FALSE,
warning = FALSE,
comment = "  ",
dev = "png",
dev.args = list(bg = '#FFFFF8'),
dpi = 300,
fig.align = "center",
#fig.width = 7,
#fig.asp = 0.618,
fig.show = "hold",
out.width = "90%"
)
library(tidyverse)
library(rstan)
library(foreach)
library(doParallel)
library(tufte)
library(bayesplot)
library(cowplot)
library(stringr)
library(readxl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#ggplot2 settings
theme_set(theme_cowplot())
df <- read.csv("unpacked_plant_data.csv")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= Failure.Date)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Genotype)
df <- read.csv("unpacked_plant_data.csv")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= New.Infections)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Genotype)
df <- read.csv("unpacked_plant_data.csv")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= New.Infections)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Ecotype)
df <- read.csv("unpacked_plant_data.csv")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= New.Infection)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Ecotype)
df <- read.csv("unpacked_plant_data.csv")
head(df)
# plot raw data
## Plot histograms of censored vs uncensored data
#ggplot(data <- df)
## Plot histograms of failure times for uncensored data
ggplot(data = df %>% filter(Censored==0), aes(x= First.Infection)) +
geom_histogram(color = "Black", fill = "DodgerBlue4") +
facet_wrap(~Ecotype)
# set up the data
uncensored_df <- df %>% filter(Censored==0, Ecotype == "XI-2")
y = uncensored_df$First.Infection
N = length(y)
data = list(y=y,
N=N)
fit <- stan(file = "fit_weibull_model01.stan",
data = data,
iter = 1000,
chains = 4)
# Clear the environment
rm(list = ls())
gc(reset = TRUE)
